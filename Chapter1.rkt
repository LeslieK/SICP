#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2280 0 17 3 13 #";#lang racket"
0 0 23 29 1 #"\n"
0 0 27 3 22 #"#lang planet neil/sicp"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-10"
0 0 23 29 1 #"\n"
0 7        1291 4           0 0           0 214 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"A"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; 2 ** 10 = 2014"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; 2 ** 16 = 65536"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; 2 ** 16"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; (f n) = 2 * n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; 2 ** 10"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0           0 0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";; (A 2 n) -> (A 1 (A 2 (- n 1))) -> 2 ** (A 2 (- n 1))) -> 2 ** 2 *"
 #"* (A 2 (- n 2))"
) 0 0 23 29 1 #"\n"
0 0 17 3 29 #";; 2 ** 2 ** 2 ** ... n times"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Fibonacci - iterative"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; constant in space"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; linear in time"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"fib2"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"fib-iter2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fib-iter2"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"b"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"fib-iter2"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; counting change"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"first-denomination"
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #") "
0 0 20 3 2 #"25"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 20 3 2 #"50"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"count-change"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"cc"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 2 #"cc"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 2 #"cc"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 2 #"cc"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 6 #"amount"
0 0 23 3 2 #" ("
0 0 14 3 18 #"first-denomination"
0 0 23 3 1 #" "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 3 #")) "
0 0 14 3 14 #"kinds-of-coins"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-11"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n>"
 #" 3"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"n"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"f-iter-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"c"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 13 #"f-iter-helper"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")) "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"f-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"f-iter-helper"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-12"
0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; Write a procedure that computes elements of Pascal's triangle by "
 #"means of a recursive process."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"pascal"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"pascal"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"pascal"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-14"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; space = depth of tree = longest path = amount"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; time = # nodes = exponential"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";; add 1 to amount (add 1 node) => multiplies time by 2; increases s"
 #"pace by 1"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-15"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; calculation of the sin of an angle in radians"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cube"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cube"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sine"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 2 #") "
0 0 20 3 3 #"0.1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 5 #"angle"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sine"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 20 3 3 #"3.0"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";; how many times is procedure p applied when (sine 12.15) is evalua"
 #"ted? 5 times"
) 0 0 23 29 1 #"\n"
0 0 17 3 19 #";; 12.15 / 3 = 4.05"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; 4.05 / 3 = 1.35"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; 1.35 / 3 = .45"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; .45 / 3 = .15"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; .15 /3 = .05"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; order of growth of space: constant"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; order of growth in time: log base 3"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; 1.2.4 Exponentiation"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; linear recursion: "
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; linear"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 5 #" time"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; linear in space"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; iterative recursion: "
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; linear in time"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; constant in space"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"expt-iter-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"a"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 16 #"expt-iter-helper"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"expt-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"expt-iter-helper"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; successive squaring"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; logarithmic in time: log base 2"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; logarithmic in space: log base 2"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 2 #"#t"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 6 #"square"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fast-expt"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-16"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; iterative exponentiation process"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; logarithmic in time"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; constant in space"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"fast-expt-iter-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 3 #") ("
0 0 14 3 21 #"fast-expt-iter-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 21 #"fast-expt-iter-helper"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"fast-expt-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 21 #"fast-expt-iter-helper"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-17"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; integer multiplication by repeated addition"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; linear in space and time"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"double"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"halve"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; logarithmic in time"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; logarithmic in space"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fast-mult"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 9 #"fast-mult"
0 0 23 3 2 #" ("
0 0 14 3 6 #"double"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 3 #") ("
0 0 14 3 5 #"halve"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fast-mult"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 9 #"fast-mult"
0 0 17 3 1 #" "
0 0 17 3 2 #"55"
0 0 17 3 1 #" "
0 0 17 3 11 #"63) => 3465"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-18"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";; write a procedure that generates an iterative process for multipl"
 #"ying 2 integers"
) 0 0 23 29 1 #"\n"
0 0 17 3 44 #";; in terms of adding, doubling, and halving"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; constant space"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; logarithmic in time"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"fast-mult-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 3 #") ("
0 0 14 3 16 #"fast-mult-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 6 #"double"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 5 #"halve"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 16 #"fast-mult-helper"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"fast-mult-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"fast-mult-helper"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 14 #"fast-mult-iter"
0 0 17 3 1 #" "
0 0 17 3 4 #"1000"
0 0 17 3 1 #" "
0 0 17 3 10 #"1) => 1000"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 14 #"fast-mult-iter"
0 0 17 3 1 #" "
0 0 17 3 4 #"1000"
0 0 17 3 1 #" "
0 0 17 3 16 #"1000) => 1000000"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 14 #"fast-mult-iter"
0 0 17 3 1 #" "
0 0 17 3 2 #"55"
0 0 17 3 1 #" "
0 0 17 3 11 #"63) => 3465"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-19"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; another look at fib-iter"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; Tp'q' = Tpq * Tpq"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; solve for p', q' in terms of p and q"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; constant in space"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; logarithmic in time"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fib"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"fib-iter"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"fib-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"fib-iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 14 3 1 #"b"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 3 #")) "
0 0 17 3 5 #";; p'"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 4 #"))  "
0 0 17 3 5 #";; q'"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 8 #"fib-iter"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"q"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 14 3 1 #"p"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 14 3 1 #"q"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 3 #"fib"
0 0 17 3 52 #" 40) something is wrong with this fib-iter procedure"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; (fib2 40) => 102334155"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-20"
0 0 23 29 1 #"\n"
0 0 17 3 110
(
 #";; GCD: It is possible to show that starting with any two positive i"
 #"ntegers and performing repeated reductions"
) 0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; will always eventually produce a pair where the second number is "
 #"0"
) 0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Euclid's algorithm"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; constant space"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; logarithmic in time"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"a"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"gcd"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; normal-order evaluation: fully expand and then reduce"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; no remainder operations are performed"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 3 #"206"
0 0 17 3 1 #" "
0 0 17 3 3 #"40)"
0 0 23 29 1 #"\n"
0 7         733 4           0 0           0 121 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 3 #"206"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"gcd"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 20 3 2 #"40"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"gcd"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 3 #") ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"gcd"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 3 #") ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 20 3 3 #"206"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 5 #")))))"
0           0 0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; applicative-order: evaluate the args and then apply"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; 2 remainder operations performed"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 3 #"206"
0 0 17 3 1 #" "
0 0 17 3 3 #"40)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 2 #" ("
0 0 17 3 9 #"remainder"
0 0 17 3 1 #" "
0 0 17 3 3 #"206"
0 0 17 3 1 #" "
0 0 17 3 4 #"40))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 2 #"5)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 2 #" ("
0 0 17 3 9 #"remainder"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"gcd"
0 0 17 3 1 #" "
0 0 17 3 2 #"40"
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";; 40"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Testing for Primality"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; number of steps grows as sqrt(n)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; divisor <= sqrt(n)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"find-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"3"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"divides?"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 12 #"test-divisor"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"divides?"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Fermat's Test"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; n is probably prime if a**n := a mod n ( a < n )"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; time grows logarithmically with exp"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; space grows logarithmically with exp"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"expmod"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"remainder"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 2 #" ("
0 0 14 3 6 #"expmod"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 1 #"m"
0 0 23 3 3 #")) "
0 0 14 3 1 #"m"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"remainder"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 6 #"expmod"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"m"
0 0 23 3 3 #")) "
0 0 14 3 1 #"m"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; time grows logarithmically in n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 1 #"e"
0 0 15 3 4 #"fine"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fermat-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"try-it"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"expmod"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"try-it"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fast-prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 5 #"times"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 5 #"times"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 11 #"fermat-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"fast-prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 5 #"times"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-21"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 16 #"smallest-divisor"
0 0 17 3 1 #" "
0 0 17 3 5 #"199) "
0 0 17 3 6 #";; 199"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 16 #"smallest-divisor"
0 0 17 3 1 #" "
0 0 17 3 6 #"1999) "
0 0 17 3 7 #";; 1999"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 16 #"smallest-divisor"
0 0 17 3 1 #" "
0 0 17 3 7 #"19999) "
0 0 17 3 4 #";; 7"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; ex1-22"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";; (runtime) => integer that specifies amt of time system has been r"
 #"unning"
) 0 0 23 29 1 #"\n"
0 7         475 4           0 0           0 78 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"timed-prime-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"start-prime-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 7 #"runtime"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"start-prime-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 10 #"start-time"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fast-prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 17 3 49 #";; replaced (prime? n) with (fast-prime? n times)"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 12 #"report-prime"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 7 #"runtime"
0 0 23 3 2 #") "
0 0 14 3 10 #"start-time"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"report-prime"
0 0 23 3 1 #" "
0 0 14 3 12 #"elapsed-time"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 19 3 7 #"\" *** \""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 14 3 12 #"elapsed-time"
0 0 23 3 2 #"))"
0           0 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; check primality for consecutive odd integers in a range"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; look at times of 3 smallest primes"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; use smallest-divisor procedure"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 7         481 4           0 0           0 79 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-for-primes"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 3 #") ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"\\nDone\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 16 #"timed-prime-test"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"iter"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-even?"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"iter"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"iter"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 4 #"))))"
0           0 0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; (search-for-primes 1000 1500)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; (search-for-primes"
0 0 17 3 13 #" 10000 10500)"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; (search-for-primes 100000 100500)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; (search-for-primes 1000000 1000500)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-23"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 58
#";; use smallest-divisor procedure with (next test-divisor)"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"next"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"next"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 4 #"next"
0 0 17 3 2 #" ("
0 0 17 3 4 #"next"
0 0 17 3 2 #" ("
0 0 17 3 4 #"next"
0 0 17 3 2 #" ("
0 0 17 3 4 #"next"
0 0 17 3 1 #" "
0 0 17 3 5 #"2))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-24"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 37 #";; user faster-prime? (Fermat's test)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 3 #";;("
0 0 17 3 17 #"search-for-primes"
0 0 17 3 1 #" "
0 0 17 3 4 #"1000"
0 0 17 3 6 #" 1500)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 3 #";;("
0 0 17 3 17 #"search-for-primes"
0 0 17 3 1 #" "
0 0 17 3 4 #"1000"
0 0 17 3 1 #" "
0 0 17 3 5 #"1050)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 3 #";;("
0 0 17 3 17 #"search-for-primes"
0 0 17 3 1 #" "
0 0 17 3 5 #"10000"
0 0 17 3 1 #" "
0 0 17 3 6 #"10050)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 3 #";;("
0 0 17 3 17 #"search-for-primes"
0 0 17 3 1 #" "
0 0 17 3 6 #"100000"
0 0 17 3 1 #" "
0 0 17 3 7 #"100050)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 3 #";;("
0 0 17 3 17 #"search-for-primes"
0 0 17 3 1 #" "
0 0 17 3 7 #"1000000"
0 0 17 3 1 #" "
0 0 17 3 8 #"1000050)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-25"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 83
(
 #";; Alyssa B. Hacker is not doing mod arithmetic until the end. Her c"
 #"alc won't work."
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 30 #";; (define (expmod base exp m)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 6 #";;   ("
0 0 17 3 9 #"remainder"
0 0 17 3 2 #" ("
0 0 17 3 10 #"fast-expt "
0 0 17 3 4 #"base"
0 0 17 3 1 #" "
0 0 17 3 3 #"exp"
0 0 17 3 2 #") "
0 0 17 3 3 #"m))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 108
(
 #";; if n = 1,000,000 => square(square(a)) ... (log n) times => squari"
 #"ng a 20 times => a ** 40 => try 2 ** 40!"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-26"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 100
(
 #";; having 2 recursive calls causes the growth to be exponential, 2 *"
 #"* (order of growth of each call)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 19 #";; 2 ** (log n) = n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-27"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 69
(
 #";; demonstrate that Carmichael numbers really do fool the Fermat tes"
 #"t"
) 0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"congruent-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 4 #"true"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"expmod"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 4 #"iter"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 14 3 5 #"false"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"iter"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 14 #"congruent-test"
0 0 17 3 1 #" "
0 0 17 3 4 #"561)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; (congruent-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"1105) "
0 0 23 29 1 #"\n"
0 0 17 3 17 #"; (congruent-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"1729) "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 14 #"congruent-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"2465) "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 21 #"congruent-test 2821) "
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 14 #"congruent-test"
0 0 17 3 6 #" 6601)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 9 #";; ex1-28"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 20 #";; Miller-Rabin Test"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 24 #";; requires #lang racket"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"expmod_mr"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 5 #"even?"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"exp/2-result"
0 0 23 3 2 #" ("
0 0 14 3 9 #"expmod_mr"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 1 #"m"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"exp-result"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 12 #"exp/2-result"
0 0 23 3 2 #") "
0 0 14 3 1 #"m"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 12 #"exp/2-result"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 12 #"exp/2-result"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 10 #"exp-result"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 10 #"exp-result"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 9 #"expmod_mr"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"m"
0 0 23 3 3 #")) "
0 0 14 3 1 #"m"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"miller-rabin-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"try-it"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 9 #"expmod_mr"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"try-it"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 4 #"561)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"1105) "
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"1729) "
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"2465) "
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 6 #"2821) "
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 5 #"6601)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 2 #"2)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 8 #"1000003)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"miller-rabin-test"
0 0 17 3 1 #" "
0 0 17 3 8 #"1000017)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0           0
